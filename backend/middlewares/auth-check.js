const jwt  = require("jsonwebtoken");
const HttpError = require("../helpers/http-error");

const checkToken= (req,res,next) => {
    // If there is an OPTIONS request generated by the browser then we have to permit it 
    if(req.method === "OPTIONS"){
        return next();
    }

    try{
        const token = req.headers.authorization.split(' ')[1];
        if(!token){
            return next(new HttpError("Authentication failed",500));
        }
        const decodedToken = jwt.verify(token, process.env.JWT_SECTER);
        req.auth={userId:decodedToken.userId};
        next();
    }catch(err){
        console.log(err);
        return next(new HttpError("Authentication failed",500));
    }
    
}

// Checking for authorization
const isAuth = (req,res,next) => {
    let user = req.profile && req.auth && req.profile.id===req.auth.userId;
    if(!user){
        return next(new HttpError("Access Denied",403));
    }
    next();
}

const isAdmin = (req,res,next) => {
    if(req.profile.role===0){
        return next(new HttpError("Admin resources, Access Denied",403));
    }
}

exports.checkToken = checkToken;
exports.isAuth = isAuth;
exports.isAdmin = isAdmin;